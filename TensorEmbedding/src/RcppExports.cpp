// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// symmetric_tensor_decomp
SEXP symmetric_tensor_decomp(SEXP A_r, int n, int m, int k, int steps, double delta1, double delta2, double tol, int loss_type, bool restrictCoreToDiag);
RcppExport SEXP TensorEmbedding_symmetric_tensor_decomp(SEXP A_rSEXP, SEXP nSEXP, SEXP mSEXP, SEXP kSEXP, SEXP stepsSEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP tolSEXP, SEXP loss_typeSEXP, SEXP restrictCoreToDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A_r(A_rSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< double >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type loss_type(loss_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type restrictCoreToDiag(restrictCoreToDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(symmetric_tensor_decomp(A_r, n, m, k, steps, delta1, delta2, tol, loss_type, restrictCoreToDiag));
    return rcpp_result_gen;
END_RCPP
}
// symmetric_tensor_decomp_cov
SEXP symmetric_tensor_decomp_cov(SEXP A_r, SEXP X_r, int n, int m, int k, int steps, double lam, double delta1, double delta2, double tol, int loss_type, bool restrictCoreToDiag);
RcppExport SEXP TensorEmbedding_symmetric_tensor_decomp_cov(SEXP A_rSEXP, SEXP X_rSEXP, SEXP nSEXP, SEXP mSEXP, SEXP kSEXP, SEXP stepsSEXP, SEXP lamSEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP tolSEXP, SEXP loss_typeSEXP, SEXP restrictCoreToDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A_r(A_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_r(X_rSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< double >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type loss_type(loss_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type restrictCoreToDiag(restrictCoreToDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(symmetric_tensor_decomp_cov(A_r, X_r, n, m, k, steps, lam, delta1, delta2, tol, loss_type, restrictCoreToDiag));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"TensorEmbedding_symmetric_tensor_decomp", (DL_FUNC) &TensorEmbedding_symmetric_tensor_decomp, 10},
    {"TensorEmbedding_symmetric_tensor_decomp_cov", (DL_FUNC) &TensorEmbedding_symmetric_tensor_decomp_cov, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_TensorEmbedding(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
